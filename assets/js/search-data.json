{
  
    
        "post0": {
            "title": "The Darvish Effect: Perceived Rarity in the New MLB",
            "content": "Abstract . On September 17, 2019, Yu Darvish recorded eight consecutive strikeouts for the Chicago Cubs. It was clear that this was regarded by the broadcast crew as tremendously rare, and much historical context was given &mdash; including reference to the MLB record of ten consecutive strikeouts by Tom Seaver in 1970. Given that one of the most significant changes in baseball over the past several decades is the increase in strikeout rate, I was curious to find out how much more likely such an occurrence is today versus 50 years ago. . In the end, what I find is that we&#39;re living in a time where the frequency of such events is increasing exponentially, and so looking back is bound to deceive. Finally, I show that the empirical data does fit this model fairly well, and if current trends continue this effect is about to become much more noticeable. . Getting started . In order to find the expected rate of incidence, we first need to establish: . How many opportunities are there? I.e. for potential streak length X, a given pitcher in each game has [total batters faced - X] opportunities to begin such a streak . | How likely is this streak to materialize? If our pitcher on average strikes out 25% of all batters he faces, the odds of striking out any string of eight batters in consecutive fashion is 0.25^8, or about 1 in 66,000. . | To that end, it was easy enough to get FanGraphs to spit out a table of all the usual pitching stats, SP only, MLB-wide, by year since 1900. . This does not include Batters Faced, but we can back that out using BF = 3*IP + H + BB + HBP. From there, we just need to back out the &#39;K rate&#39; using K / BF. . import pandas as pd %matplotlib inline pd.options.display.float_format = &#39;{:.2f}&#39;.format raw_stats = &#39;C:/Users/tmaul/Documents/GitHub/website/assets/raw_data/fan_graphs_sp_data.csv&#39; cols_to_use = [&#39;Season&#39;, &#39;GS&#39;, &#39;IP&#39;, &#39;H&#39;, &#39;BB&#39;, &#39;HBP&#39;, &#39;SO&#39;] # drop 2020 due to shortened season sp_data_fg = pd.read_csv(raw_stats, usecols=cols_to_use, index_col=&#39;Season&#39;).rename(columns={&#39;SO&#39; : &#39;K&#39;}).drop(2020) sp_data_fg[&#39;BF_est&#39;] = sp_data_fg.IP*3 + sp_data_fg.H + sp_data_fg.BB + sp_data_fg.HBP sp_data_fg[&#39;BF_per_start_est&#39;] = sp_data_fg.BF_est/sp_data_fg.GS sp_data_fg[&#39;K_rt_SP&#39;] = sp_data_fg.K/sp_data_fg.BF_est sp_data_fg # this is a limited approximation bc of RPs . . GS H BB IP HBP K BF_est BF_per_start_est K_rt_SP . Season . 1900 1131 | 10711 | 2942 | 9743.00 | 516 | 2643 | 43398.00 | 38.37 | 0.06 | . 1901 2217 | 20819 | 5420 | 19457.10 | 874 | 6954 | 85484.30 | 38.56 | 0.08 | . 1902 2225 | 20144 | 5367 | 19559.20 | 761 | 6595 | 84949.60 | 38.18 | 0.08 | . 1903 2226 | 19640 | 5390 | 19532.20 | 750 | 7923 | 84376.60 | 37.91 | 0.09 | . 1904 2492 | 20174 | 5676 | 21830.00 | 800 | 9250 | 92140.00 | 36.97 | 0.10 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 2015 4858 | 28040 | 8518 | 28223.10 | 1040 | 23218 | 122267.30 | 25.17 | 0.19 | . 2016 4856 | 27452 | 9004 | 27412.20 | 993 | 23619 | 119685.60 | 24.65 | 0.20 | . 2017 4860 | 26919 | 9330 | 26787.10 | 1040 | 23691 | 117650.30 | 24.21 | 0.20 | . 2018 4862 | 24800 | 8782 | 26060.20 | 1095 | 23875 | 112857.60 | 23.21 | 0.21 | . 2019 4858 | 24869 | 8282 | 25157.20 | 1049 | 23970 | 109671.60 | 22.58 | 0.22 | . 120 rows × 9 columns . A pastime unlike the past . Now that we have all of the necessary numbers in place, let&#39;s take a look at some basic trends. As expected, the &#39;K rate&#39; has increased dramatically in the last 100 years. However, we can also see that the average starting pitcher in 1900 faced almost twice as many batters as today, and this diminished opportunity will counteract the surge in punch-outs to some extent. . import matplotlib as plt # plt.rcdefaults() plt.style.use(&#39;seaborn&#39;) ax = sp_data_fg.plot(y=&#39;K_rt_SP&#39;, legend=None, color=&#39;tab:blue&#39;); ax.set_ylabel(&#39;K_rt_SP&#39;, fontsize=16, color=&#39;tab:blue&#39;); ax2 = ax.twinx(); sp_data_fg.plot(y=&#39;BF_per_start_est&#39;, ax=ax2, legend=None, color=&#39;tab:purple&#39;); ax2.set_ylabel(&#39;BF_per_start&#39;, fontsize=16, color=&#39;tab:purple&#39;); ax.grid(b=False, axis=&#39;y&#39;); ax2.grid(b=False, axis=&#39;y&#39;); . . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-01-26T16:59:01.326690 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/ Results and discussion . All that&#39;s left to do now is calculate the theoretical rate of incidence (shown below for X = 5, 8). A few interesting results: . With the rise of the strikeout, the expected number of K streaks is growing exponentially, in particular since 2000. . | We can see that the Darvish Effect is inevitable: something that has only happened a handful of times in MLB history sounds like a generational anomaly, and yet we can show that in today&#39;s game it will be orders of magnitude more common. . | In numerical terms: 50 years ago, we would expect a pitcher to record eight consecutive strikeouts just once in 57 MLB seasons. As of 2019, we can now expect once in 2.5 seasons. . | Drawing a direct comparison between Seaver&#39;s MLB record and Darvish&#39;s eight, we see that the former is almost 1200x less likely in expectation. . | . sp_data_fg[&#39;E_K5&#39;] = sp_data_fg.GS*(sp_data_fg.BF_per_start_est-4)*sp_data_fg.K_rt_SP**5 sp_data_fg[&#39;E_K8&#39;] = sp_data_fg.GS*(sp_data_fg.BF_per_start_est-7)*sp_data_fg.K_rt_SP**8 sp_data_fg[&#39;E_K10&#39;] = sp_data_fg.GS*(sp_data_fg.BF_per_start_est-9)*sp_data_fg.K_rt_SP**10 ax = sp_data_fg.plot(y=&#39;E_K5&#39;, legend=None, color=&#39;tab:blue&#39;); ax.set_ylabel(&#39;E_K5&#39;, color=&#39;tab:blue&#39;, fontsize=16); ax2 = ax.twinx(); sp_data_fg.plot(y=&#39;E_K8&#39;, ax=ax2, color=&#39;tab:purple&#39;, legend=None); ax2.set_ylabel(&#39;E_K8&#39;, color=&#39;tab:purple&#39;, fontsize=16); ax.grid(b=False, axis=&#39;y&#39;); ax2.grid(b=False, axis=&#39;y&#39;); ax.set_title(&#39;Expected Occurences of K Streak of Given Length Per MLB Season&#39;); . . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-01-26T16:59:01.863316 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/ seaver = sp_data_fg.E_K10[1970] darvish = sp_data_fg.E_K8[2019] K8_1970 = sp_data_fg.E_K8[1970] print(f&#39;1970: Expected one K8 streak every {round(1/K8_1970, 1)} seasons.&#39;) print(f&#39;2019: Expected one K8 streak every {round(1/darvish, 1)} seasons.&#39;) print(f&#39;Seaver &#39;s K10: about {int(darvish/seaver)} times less likely than Darvish &#39;s K8&#39;) . . 1970: Expected one K8 streak every 57.2 seasons. 2019: Expected one K8 streak every 2.5 seasons. Seaver&#39;s K10: about 1164 times less likely than Darvish&#39;s K8 . Limitations and areas of further exploration . This analysis only uses MLB-wide &#39;K rate&#39; as an input &mdash; this is a major simplification. In reality, there will be above and below-average pitchers, and since the &#39;K rate&#39; is compounded, this should result in more observed streaks than our estimates. Furthermore, pitchers who are better than average and/or already having a great outing are more likely to remain in the game, and face more batters. . a. In the following section, we confirm this hypothesis using actual play-by-play logs . | As mentioned earlier, our source data only covers Starting Pitchers. This is fairly reasonable, as our chief concern was starters to begin with and, especially for streaks on the longer end, relievers are likely not much of a factor anyway. . | Using game logs from RetroSheet (or other data?), it should be theoretically possible to produce the exact number of observed K streaks per season. . | We could attempt a less stylized, more rigorous analysis by building some approximate underlying distributions for &#39;K rate&#39; among pitcher population and expected number and length of outings for each respective pitcher, then simulating outcomes. . | Appendix: Empirical results using Retrosheet . The best way (that I know of) to produce empirical streak data is by scraping the event logs maintained by Retrosheet. Although Retrosheet has logged every Major League game since 1871, reading every one of them is no small task. Here, we will start by unpacking one team, one season, before trying to scale up. . To start, let&#39;s parse the play-by-play file for the 2019 Chicago Cubs. We&#39;ll flag the start of each new game, as well as any notable streaks: . events = &#39;C:/Users/tmaul/Documents/GitHub/website/assets/raw_data/2019CHN.EVN&#39; ########|Parse generic event file|######## col_names = [&#39;type&#39;, &#39;f1&#39;, &#39;f2&#39;, &#39;f3&#39;, &#39;f4&#39;, &#39;f5&#39;, &#39;f6&#39;] df = pd.read_table(events, sep=&#39;,&#39;, names=col_names) #there are eleven possible event types, each of whitch contains at most 6 columns of info, we label these f1-f6 #detailed description of all event types and associated field can be found at retrosheet.org #this season (2019 Cubs home games) contains 13,859 events plays_to_ignore = [&#39;NP&#39;, &#39;CS&#39;, &#39;BK&#39;, &#39;PB&#39;, &#39;WP&#39;, &#39;PO&#39;, &#39;SB&#39;] k_streak_threshold = 5 # variable for index, row in df.iterrows(): if row[&#39;type&#39;] == &#39;id&#39;: game_id = row[&#39;f1&#39;] elif row[&#39;type&#39;] == &#39;info&#39;: if row[&#39;f1&#39;] == &#39;hometeam&#39;: h_team = row[&#39;f2&#39;] elif row[&#39;f1&#39;] == &#39;visteam&#39;: a_team = row[&#39;f2&#39;] elif row[&#39;f1&#39;] == &#39;date&#39;: game_date = pd.to_datetime(row[&#39;f2&#39;]).date() print(f&#39;{game_date}: {a_team} @ {h_team}&#39;) elif row[&#39;type&#39;] == &#39;start&#39; and row[&#39;f5&#39;] == &#39;1&#39;: # only care if SP declared if row[&#39;f3&#39;] == &#39;0&#39;: a_pitch = row[&#39;f1&#39;] a_streak = {a_pitch : 0} else: h_pitch = row[&#39;f1&#39;] h_streak = {h_pitch : 0} elif row[&#39;type&#39;] == &#39;play&#39;: if row[&#39;f2&#39;] == &#39;0&#39;: # 0 means away *batter* means home pitcher p = h_pitch else: p = a_pitch if row[&#39;f6&#39;][0] == &#39;K&#39;: # identify a strikeout (there *can* be modifiers after K so take 0th) if p in h_streak: h_streak[p] += 1 if h_streak[p] &gt;= k_streak_threshold: print(&#39;***K_STREAK_LENGTH &#39;, h_streak[p], &#39; BY &#39;, p, &#39;PITCHING FOR &#39;, h_team, &#39; ***&#39;) elif p in a_streak: a_streak[p] += 1 if a_streak[p] &gt;= k_streak_threshold: print(&#39;***K_STREAK_LENGTH &#39;, a_streak[p], &#39; BY &#39;, p, &#39;PITCHING FOR &#39;, a_team, &#39; ***&#39;) elif row[&#39;f6&#39;][0:2] in plays_to_ignore: # these &#39;play&#39; events do not constitute a plate app, ignore continue else: # zero out the streak if a real non-K play if p in h_streak: h_streak[p] = 0 elif p in a_streak: a_streak[p] = 0 elif row[&#39;type&#39;] == &#39;sub&#39; and row[&#39;f5&#39;] == &#39;1&#39;: if row[&#39;f3&#39;] == &#39;0&#39;: a_pitch = row[&#39;f1&#39;] a_streak = {a_pitch : 0} else: h_pitch = row[&#39;f1&#39;] h_streak = {h_pitch : 0} . . 2019-04-08: PIT @ CHN 2019-04-10: PIT @ CHN 2019-04-11: PIT @ CHN 2019-04-12: ANA @ CHN 2019-04-13: ANA @ CHN 2019-04-19: ARI @ CHN 2019-04-20: ARI @ CHN 2019-04-21: ARI @ CHN 2019-04-23: LAN @ CHN 2019-04-24: LAN @ CHN 2019-04-25: LAN @ CHN 2019-05-03: SLN @ CHN 2019-05-04: SLN @ CHN 2019-05-05: SLN @ CHN 2019-05-06: MIA @ CHN 2019-05-07: MIA @ CHN ***K_STREAK_LENGTH 5 BY smitc006 PITCHING FOR MIA *** 2019-05-08: MIA @ CHN 2019-05-09: MIA @ CHN 2019-05-10: MIL @ CHN 2019-05-11: MIL @ CHN 2019-05-12: MIL @ CHN 2019-05-20: PHI @ CHN 2019-05-21: PHI @ CHN 2019-05-22: PHI @ CHN 2019-05-23: PHI @ CHN 2019-05-24: CIN @ CHN 2019-05-25: CIN @ CHN 2019-05-26: CIN @ CHN 2019-06-03: ANA @ CHN 2019-06-04: COL @ CHN ***K_STREAK_LENGTH 5 BY hendk001 PITCHING FOR CHN *** 2019-06-05: COL @ CHN 2019-06-06: COL @ CHN 2019-06-07: SLN @ CHN 2019-06-08: SLN @ CHN 2019-06-09: SLN @ CHN 2019-06-18: CHA @ CHN 2019-06-19: CHA @ CHN 2019-06-20: NYN @ CHN 2019-06-21: NYN @ CHN 2019-06-22: NYN @ CHN 2019-06-23: NYN @ CHN 2019-06-24: ATL @ CHN 2019-06-25: ATL @ CHN 2019-06-26: ATL @ CHN 2019-06-27: ATL @ CHN 2019-07-12: PIT @ CHN 2019-07-13: PIT @ CHN 2019-07-14: PIT @ CHN 2019-07-15: CIN @ CHN 2019-07-16: CIN @ CHN 2019-07-17: CIN @ CHN 2019-07-19: SDN @ CHN 2019-07-20: SDN @ CHN 2019-07-21: SDN @ CHN 2019-08-02: MIL @ CHN 2019-08-03: MIL @ CHN 2019-08-04: MIL @ CHN 2019-08-05: OAK @ CHN 2019-08-06: OAK @ CHN ***K_STREAK_LENGTH 5 BY unded001 PITCHING FOR CHN *** ***K_STREAK_LENGTH 6 BY unded001 PITCHING FOR CHN *** 2019-08-07: OAK @ CHN 2019-08-20: SFN @ CHN 2019-08-21: SFN @ CHN 2019-08-22: SFN @ CHN 2019-08-23: WAS @ CHN 2019-08-24: WAS @ CHN 2019-08-25: WAS @ CHN 2019-08-30: MIL @ CHN 2019-08-31: MIL @ CHN 2019-09-01: MIL @ CHN 2019-09-02: SEA @ CHN 2019-09-03: SEA @ CHN 2019-09-13: PIT @ CHN 2019-09-14: PIT @ CHN 2019-09-15: PIT @ CHN 2019-09-16: CIN @ CHN 2019-09-17: CIN @ CHN ***K_STREAK_LENGTH 5 BY darvy001 PITCHING FOR CHN *** ***K_STREAK_LENGTH 6 BY darvy001 PITCHING FOR CHN *** ***K_STREAK_LENGTH 7 BY darvy001 PITCHING FOR CHN *** ***K_STREAK_LENGTH 8 BY darvy001 PITCHING FOR CHN *** 2019-09-18: CIN @ CHN 2019-09-19: SLN @ CHN 2019-09-20: SLN @ CHN 2019-09-21: SLN @ CHN 2019-09-22: SLN @ CHN . The theoretical results above suggested 45 5-K streaks in 2019, so about 1.5 per ballpark. Wrigley Field comes in a bit higher at four, but let&#39;s try to get more data efore drawing any conclusions. . RetroSheet has over 2,000 of these log files in total (20-30 teams, 100 seasons). In order to make this manageable we will: . Condense the files in to one megafile per year using command line. . | Read the remaining files in bulk using a for loop, and store the results as a DataFrame. . | #the csv of empirical data was generated in the following manner: # 1. downloaded .zip file for each decade from retrosheet # 2. used Powershell to concatenate all event files into one giant .txt per season stored_data = raw_stats = &#39;C:/Users/tmaul/Documents/GitHub/website/assets/raw_data/empirical_K5_by_season.csv&#39; final_counts = pd.read_csv(stored_data, index_col=0) ax = final_counts.plot(legend=None, color=&#39;tab:purple&#39;); ax.set_title(&#39;Empirical K5 Occurences by Season&#39;); ######|Powershell|######## # PS C: Users tmaul Documents eCornell Retrosheet_Data 2010s&gt; $yr = &quot;2019&quot;; $path = $yr + &quot;_all.txt&quot; # PS C: Users tmaul Documents eCornell Retrosheet_Data 2010s&gt; cat $yr*.EVN &gt; all_teams_NL.txt; cat $yr*.EVA &gt; all_teams_AL.txt; cat all_teams*.txt &gt; $path; $yr = &quot;2018&quot;; $path = $yr + &quot;_all.txt&quot; ######|Jupyter|######## # years_to_map = range(2010, 2019) #one decade at a time # year_k_map = dict() # for this_yr in years_to_map: # this_yr_file = f&#39;C:/Users/tmaul/Documents/eCornell/Retrosheet_Data/2010s/{this_yr}_all.txt&#39; # ########|Parse generic event file|######## # col_names = [&#39;type&#39;, &#39;f1&#39;, &#39;f2&#39;, &#39;f3&#39;, &#39;f4&#39;, &#39;f5&#39;, &#39;f6&#39;] # df = pd.read_table(this_yr_file, sep=&#39;,&#39;, names=col_names, encoding=&#39;utf_16&#39;) # #there are eleven possible event types, each of whitch contains at most 6 columns of info, we label these f1-f6 # #detailed description of all event types and associated field can be found at retrosheet.org # plays_to_ignore = [&#39;NP&#39;, &#39;CS&#39;, &#39;BK&#39;, &#39;PB&#39;, &#39;WP&#39;, &#39;PO&#39;, &#39;SB&#39;] # k_streak_threshold = 5 # variable # num_streaks = 0 # for index, row in df.iterrows(): # if row[&#39;type&#39;] == &#39;id&#39;: # game_id = row[&#39;f1&#39;] # elif row[&#39;type&#39;] == &#39;info&#39;: # if row[&#39;f1&#39;] == &#39;hometeam&#39;: # h_team = row[&#39;f2&#39;] # elif row[&#39;f1&#39;] == &#39;visteam&#39;: # a_team = row[&#39;f2&#39;] # elif row[&#39;f1&#39;] == &#39;date&#39;: # game_date = pd.to_datetime(row[&#39;f2&#39;]).date() # # print(f&#39;{game_date}: {a_team} @ {h_team}&#39;) # elif row[&#39;type&#39;] == &#39;start&#39; and row[&#39;f5&#39;] == &#39;1&#39;: # only care if SP declared # if row[&#39;f3&#39;] == &#39;0&#39;: # a_pitch = row[&#39;f1&#39;] # a_streak = {a_pitch : 0} # else: # h_pitch = row[&#39;f1&#39;] # h_streak = {h_pitch : 0} # elif row[&#39;type&#39;] == &#39;play&#39;: # if row[&#39;f2&#39;] == &#39;0&#39;: # 0 means away *batter* means home pitcher # p = h_pitch # else: # p = a_pitch # if row[&#39;f6&#39;][0] == &#39;K&#39;: # identify a strikeout (there *can* be modifiers after K so take 0th) # if p in h_streak: # h_streak[p] += 1 # if h_streak[p] &gt;= k_streak_threshold: # if h_streak[p] == k_streak_threshold: # num_streaks += 1 # # print(&#39;***K_STREAK_LENGTH &#39;, h_streak[p], &#39; BY &#39;, p, &#39;PITCHING FOR &#39;, h_team, &#39; *** --&gt;&#39;, num_streaks) # elif p in a_streak: # a_streak[p] += 1 # if a_streak[p] &gt;= k_streak_threshold: # if a_streak[p] == k_streak_threshold: # num_streaks += 1 # # print(&#39;***K_STREAK_LENGTH &#39;, a_streak[p], &#39; BY &#39;, p, &#39;PITCHING FOR &#39;, a_team, &#39; *** --&gt;&#39;, num_streaks) # elif row[&#39;f6&#39;][0:2] in plays_to_ignore: # these &#39;play&#39; events do not constitute a plate app, ignore # continue # else: # zero out the streak if a real non-K play # if p in h_streak: # h_streak[p] = 0 # elif p in a_streak: # a_streak[p] = 0 # elif row[&#39;type&#39;] == &#39;sub&#39; and row[&#39;f5&#39;] == &#39;1&#39;: # if row[&#39;f3&#39;] == &#39;0&#39;: # a_pitch = row[&#39;f1&#39;] # a_streak = {a_pitch : 0} # else: # h_pitch = row[&#39;f1&#39;] # h_streak = {h_pitch : 0} # print(this_yr, &#39;--&gt;&#39;, num_streaks) # year_k_map[this_yr] = num_streaks . . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-01-29T16:23:07.513218 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/ After parsing through all of the play-by-play logs, we can see that the data is fairly exponential, albeit a little bit of noise and biased higher than our model (as hypothesized). . Let&#39;s overlay the two for a bit more clarity: . ax = sp_data_fg.plot(y=&#39;E_K5&#39;, legend=None, color=&#39;tab:blue&#39;, label=&#39;Theoretical K5&#39;); ax.plot(final_counts, &#39;X&#39;, color=&#39;tab:purple&#39;, label=&#39;Empirical K5&#39;); ax.set_title(&#39;MLB K Streaks: Expected vs Actual&#39;); ax.legend(); . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-01-29T21:00:58.760807 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/ The rough hypothesis discussed in the previous section was that the static inputs to our model don&#39;t account for variation among the pitching population, and that would likely result in an occurence rate higher than predicted. . Just for fun, let&#39;s toy with the &#39;K rate&#39; a bit, and see how much better the fit is: . proj_df = sp_data_fg.copy() mult = 1.2 proj_df[&#39;K_rt_proj&#39;] = proj_df.K_rt_SP * mult proj_df[&#39;E_K5_proj&#39;] = proj_df.GS*(proj_df.BF_per_start_est-4)*proj_df.K_rt_proj**5 ax = proj_df.plot(y=&#39;E_K5_proj&#39;, linestyle=&#39;--&#39;, legend=None, color=&#39;tab:orange&#39;, label=&#39;Projected K5&#39;); ax.plot(final_counts, &#39;X&#39;, color=&#39;tab:purple&#39;, label=&#39;Empirical K5&#39;); ax.set_title(&#39;MLB K Streaks: Expected vs Actual&#39;); ax.legend(); . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-01-29T21:39:12.647365 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/ Looks like giving the &#39;K rate&#39; a 20% boost results in a nearly perfect fit. If we extrapolate this slightly, we can see that if current trends hold, the frequency of K streaks will double again in the next five years: . extension = pd.Series(proj_df.E_K5_proj, index=range(1920, 2026)) extension[2025] = 225 extension.interpolate(method=&#39;quadratic&#39;, limit=25, inplace=True) extension ax = extension.plot(linestyle=&#39;--&#39;, legend=None, color=&#39;tab:orange&#39;, label=&#39;Projected K5&#39;); ax.plot(final_counts, &#39;X&#39;, color=&#39;tab:purple&#39;, label=&#39;Empirical K5&#39;); ax.set_title(&#39;MLB K Streaks: Expected vs Actual&#39;); ax.legend(); . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-01-29T21:38:27.661855 image/svg+xml Matplotlib v3.3.2, https://matplotlib.org/",
            "url": "https://tmaule.github.io/website/sports/data%20science/2021/01/26/k_streaks.html",
            "relUrl": "/sports/data%20science/2021/01/26/k_streaks.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://tmaule.github.io/website/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "ghtop redux",
            "content": ". Introduction . We recently refactored the CLI tool ghtop, created by the CEO of GitHub, Nat Friedman. Nat even described our refactor as a “tour de force”. This post describes what we learned along the way. . Motivation . Recently, we released ghapi, a new python client for the GitHub API. ghapi provides unparalleled ease of access to the GitHub api, as well as utilities for interacting with GitHub Actions. Part of our motivation for creating ghapi was to accelerate the development of build, testing and deployment tools that help us in maintaining fastai projects. . We recently started using GitHub Actions to perform a wide variety of tasks automatically like: unit and integration tests, deploying documentation, building Docker containers and Conda packages, sharing releases on Twitter, and much more. This automation is key to maintaining the vast open source fastai ecosystem with very few maintainers. . Since ghapi is central to so many of these tasks, we wanted to stress-test its efficacy against other projects. That’s when we found ghtop. This tool allows you to stream all the public events happening on GitHub to a CLI dashboard. We thought it would be a fun learning experience to refactor this code base with various fastai tools such as ghapi and fastcore, but also try out new libraries like rich. . Features we added to our tools . While exploring ghtop, we added several features to various fastai tools that we found to be generally useful. . ghapi Authentication . We added the function github_auth_device which allows users to authenticate their api client with GitHub interactively in a browser. When we call this function we get the following prompt: . github_auth_device() . First copy your one-time code: 276E-C910 Then visit https://github.com/login/device in your browser, and paste the code when prompted. Shall we try to open the link for you? [y/n] . The browser opens a window that looks like this: . . The function then returns an authenticated token which you can use for various tasks. While this is not the only way to create a token, this is a user friendly way to create a token, especially for those who are not as familiar with GitHub. . ghapi Events . As a result of our explorations with ghtop, we added an event module to ghapi. This is useful for retrieving and inspecting sample events. Inspecting sample events is important as it allows you to prototype GitHub Actions workflows locally. You can sample real events with load_sample_events: . from ghapi.event import load_sample_events evts = load_sample_events() . Individual events are formatted as markdown lists to be human readable in Jupyter: . print(evts[0]) . - id: 14517925737 - type: PushEvent - actor: - id: 17030246 - login: BeckhamL - display_login: BeckhamL - gravatar_id: - url: https://api.github.com/users/BeckhamL - avatar_url: https://avatars.githubusercontent.com/u/17030246? - repo: - id: 154349747 - name: BeckhamL/leetcode - url: https://api.github.com/repos/BeckhamL/leetcode - payload: - push_id: 6194986903 - size: 1 - distinct_size: 1 - ref: refs/heads/master - head: 2055b0fcf22f1c3543e38b60199f6882266d32a5 - before: cb16921949c969b5153a0c23ce8fe516d2c8d773 - commits: - - sha: 2055b0fcf22f1c3543e38b60199f6882266d32a5 - author: - email: beckham.lam@mail.mcgill.ca - name: Beckham Lam - message: Create detectCapital.ts - distinct: True - url: https://api.github.com/repos/BeckhamL/leetcode/commits/2055b0fcf22f1c3543e38b60199f6882266d32a5 - public: True - created_at: 2020-12-13T21:32:34Z . You can also inspect the json data in an event, which are accessible as attributes: . evts[0].type . &#39;PushEvent&#39; . For example, here is the frequency of all full_types in the sample: . x,y = zip(*Counter([o.full_type for o in evts]).most_common()) plt.figure(figsize=(8, 6)) plt.barh(x[::-1],y[::-1]); . We can fetch public events in parallel with GhApi.list_events_parallel. In our experiments, repeatedly calling list_events_parallel is fast enough to fetch all current public activity from all users across the entire GitHub platform. We use this for ghtop. Behind the scenes, list_events_parallel uses Python&#39;s ThreadPoolExecutor to fetch events in parallel - no fancy distributed systems or complicated infrastructure necessary, even at the scale of GitHub! . %time api = GhApi() evts = api.list_events_parallel() len(evts) . CPU times: user 2 µs, sys: 0 ns, total: 2 µs Wall time: 4.29 µs . 240 . Note that the GitHub API is stateless, so successive calls to the API will likely return events already seen. We handle this by using a set operations to filter out events already seen. . ghapi pagination . One of the most cumbersome aspects of fetching lots of data from the GitHub api can be pagination. As mentioned in the documentation, different endpoints have different pagination rules and defaults. Therefore, many api clients offer clunky or incomplete interfaces for pagination. . In ghapi we added an entire module with various tools to make paging easier. Below is an example for retrieving repos for the github org. Without pagination, we can only retrieve a fixed number at a time (by default 30): . api = GhApi() repos = api.repos.list_for_org(&#39;fastai&#39;) len(repos) . 30 . However, to get more we can paginate through paged: . from ghapi.event import paged repos = paged(api.repos.list_for_org, &#39;fastai&#39;) for page in repos: print(len(page), page[0].name) . 30 fast-image 30 fastforest 30 .github 8 tweetrel . You can learn more about this functionality by reading the docs. . fastcore Sparklines . Part of goals for refactoring ghtop were to introduce cool visualizations in the terminal of data. We drew inspiration from projects like bashtop, which have CLI interfaces that look like this: . Concretely, we really liked the idea of sparklines in the terminal. Therefore, we created the ability to show sparklines with fastcore: . from fastcore.utils import sparkline data = [9,6,None,1,4,0,8,15,10] print(f&#39;without &quot;empty_zero&quot;: {sparkline(data, empty_zero=False)}&#39;) print(f&#39; with &quot;empty_zero&quot;: {sparkline(data, empty_zero=True )}&#39;) . without &#34;empty_zero&#34;: ▅▂ ▁▂▁▃▇▅ with &#34;empty_zero&#34;: ▅▂ ▁▂ ▃▇▅ . For more information on this function, read the docs. Later in this post, we will describe how we used Rich to add color and animation to these sparklines. . fastcore EventTimer . Because we wanted streaming event data to automatically populate sparklines, we created EventTimer that constructs a histogram according to a frequency and time span you set. With EventTimer, you can add events with add, and get the number of events and their frequency: . from fastcore.utils import EventTimer from time import sleep import random def _randwait(): yield from (sleep(random.random()/200) for _ in range(100)) c = EventTimer(store=5, span=0.03) for o in _randwait(): c.add(1) print(f&#39;Num Events: {c.events}, Freq/sec: {c.freq:.01f}&#39;) print(&#39;Most recent: &#39;, sparkline(c.hist), *L(c.hist).map(&#39;{:.01f}&#39;)) . Num Events: 6, Freq/sec: 301.1 Most recent: ▃▁▁▇▁ 323.6 274.8 291.3 390.9 283.6 . For more information, see the docs. . CLI Animations With Rich . Rich is an amazing python library that allows you to create beautiful, animated and interactive CLI interfaces. Below is a preview of some its features: . Rich also offers animated elements like spinners: . ... and progress bars: . While this post is not about rich, we highly recommend visiting the repo and the docs to learn more. Rich allows you to create your own custom elements. We created two custom elements - Stats and FixedPanel, which we describe below: . Stats: Sparklines with metrics . Stats renders a group of sparklines along with a spinner and a progress bar. First we define our sparklines, the last argument being a list of event types to count: . from ghtop.richext import * from ghtop.all_rich import * console = Console() s1 = ESpark(&#39;Issues&#39;, &#39;green&#39;, [IssueCommentEvent, IssuesEvent]) s2 = ESpark(&#39;PR&#39;, &#39;red&#39;, [PullRequestEvent, PullRequestReviewCommentEvent, PullRequestReviewEvent]) s3 = ESpark(&#39;Follow&#39;, &#39;blue&#39;, [WatchEvent, StarEvent]) s4 = ESpark(&#39;Other&#39;, &#39;red&#39;) s = Stats([s1,s2,s3,s4], store=5, span=.1, stacked=True) console.print(s) . 🌍 Issues PR Follow Other Quota /min 0.0 0.0 0.0 0.0 ━━━━━━━ 0% . You can add events to update counters and sparklines with add_events: . evts = load_sample_events() s.add_events(evts) console.print(s) . 🌍 Issues PR Follow Other Quota /min 11772 ▁▇ 16546 ▁▇ 5991 ▁▇ 6484 ▁ ━━━━━━━ 0% . You can update the progress bar with the update_prog method: . s.update_prog(50) console.print(s) . 🌍 Issues PR Follow Other Quota /min 4076 ▁▇ 5408 ▁▇ 1834 ▁▇ 5998 ▁ ━━━╸━━━ 50% . Here is what the animated version looks like: . . FixedPanel: A panel with fixed height . A key aspect of ghtop is showing events in different panels. We created FixedPanel to allow us to arrange panels in a grid that we can incrementally add events to: . p = FixedPanel(15, box=box.HORIZONTALS, title=&#39;ghtop&#39;) for e in evts: p.append(e) grid([[p,p]]) . ─────────────────── ghtop ─────────────────── ────────────────── ghtop ─────────────────── 📪 dependabo…closed PR #3 o…herzli…&quot;Bump … 📪 dependabo…closed PR #3 …herzli…&quot;Bump … ⭐ dongjun13 pushed 1 commi…dongjun13/2 ⭐ dongjun13 pushed 1 comm…dongjun13/2 ⭐ admmonito…pushed 1 commi…admmonitors/t… ⭐ admmonito…pushed 1 comm…admmonitors/t… ⭐ randomper…pushed 1 commi…randomperson1… ⭐ randomper…pushed 1 comm…randomperson1… ⭐ ahocevar pushed 6 commi…openlayers/ope… ⭐ ahocevar pushed 6 commi…openlayers/op… 🏭 arjmoto created branch …arjmoto/redux-… 🏭 arjmoto created branch…arjmoto/redux-… 💬 stale[bot…created commen…ironha…&quot;This … 💬 stale[bot…created comme…ironha…&quot;This … ⭐ commit-b0…pushed 1 commi…commit-b0t/co… ⭐ commit-b0…pushed 1 comm…commit-b0t/co… ⭐ yakirgot pushed 2 commi…yakirgot/snake ⭐ yakirgot pushed 2 commi…yakirgot/snake 💬 awolf78 created comment…Impulse…&quot;If yo… 💬 awolf78 created commen…Impulse…&quot;If yo… ⭐ kreus7 pushed 1 commit…kreus7/kreusada… ⭐ kreus7 pushed 1 commit…kreus7/kreusad… ⭐ rgripper pushed 1 commi…rgripper/webco… ⭐ rgripper pushed 1 commi…rgripper/webc… 👀 thelittle…started watchi…ritchie46/pol… 👀 thelittle…started watch…ritchie46/pol… 🏭 adrian698 created branch…adrian698/Test 🏭 adrian698 created branc…adrian698/Test ⭐ mergify[b…pushed 2 commi…spbu-coding/6… ⭐ mergify[b…pushed 2 comm…spbu-coding/6… ───────────────────────────────────────────── ──────────────────────────────────────────── . To learn more about our extensions to rich see these docs. . A demo of ghtop animations . Putting all of this together, we get the following results: . 4 Panels with a sparkline for different types of events: . . single panel with a sparkline . . To learn more about ghtop, see the docs. . Interesting python features used . While making these docs, we used the following python features that at least one person we demoed it to found interesting or didn&#39;t know about. If you have been using python for sometime, you might know about all or most of these features: . yield from . Generators are a powerful feature of python, which are especially useful for iterating through large datasets lazily. . dequeue . f-strings .",
            "url": "https://tmaule.github.io/website/ghtop",
            "relUrl": "/ghtop",
            "date": " • Jan 29, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://tmaule.github.io/website/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "Hi, I’m Tyler. I am a quantitative trader, living in Chicago since 2015. . tmaule23@gmail.com .",
          "url": "https://tmaule.github.io/website/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tmaule.github.io/website/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}